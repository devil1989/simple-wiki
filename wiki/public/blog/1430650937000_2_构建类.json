{"1430650937000_2_构建类.json":"<h2>构建类</h2>\n\n<p>1、构造函数：第一次实践</p>\n\n<pre><code>//通过new和构造函数\nvar User = function(name, nickname){\n\tthis.name = name;\n\tthis.nickname = nickname;\n}\n\n//实例化对象 good case\nvar user = new User(&#39;vczero&#39;, &#39;鬼谣&#39;);</code></pre>\n\n<p>2、模拟类库</p>\n\n<pre><code>var Class = function(){\n\tvar klass = function(){\n\t\tthis.init.apply(this, arguments);\n\t};\n\tklass.prototype.init = function(){};\t\n    return klass;\n}\n\nvar User = new Class();\n//初始化\nUser.prototype.init = function(){\n\tconsole.log(&#39;------hello world-------&#39;);\n}\n//添加实例函数\nUser.prototype.show = function(){\n\tconsole.log(&#39;show method&#39;);\n}\n//添加静态函数\nUser.userCompare = function(){\n\tconsole.log(&#39;这里当然可以使用this比较&#39;);\n}\nvar user = new User();\n\n//为了简洁，可以给类的prototype起个别名\n//例如User.fn = User.prototype;\n//User.fn.add = function(){....}</code></pre>\n\n<p>3、封装：更加清楚的表达    </p>\n\n<pre><code>//上面的模拟类库表达不是很直观，因此采用新的方式\n//增加extend和include方法\nvar Class = function(){\n\tvar klass = function(){\n\t\tthis.init.apply(this, arguments);\n\t};\n\tklass.prototype.init = function(){};\n\n\t//prototype别名\n\tklass.fn = klass.prototype;\n\n\t//类别名\n\tklass.fn.parent = klass;\n\n\t//增加类属性\n\tKlass.extend = function(obj){\n\t\tvar extended = obj.extended;\n\t\tfor(var i in obj){\n\t\t\tklass[i] = obj[i];\n\t\t}\n\t\tif(extended)extended(klass);\n\t};\n\t//增加实例属性\n\tklass.include = function(obj){\n\t\tvar included = obj.included;\n\t\tfor(var i in obj){\n\t\t\tklass.fn[i] = obj[i];\n\t\t}\n\t\tif(included) included(klass);\n\t};\n\n\treturn klass;\n}\n\n//实例化对象\nvar User = new Class();\n//静态方法\nUser.extend({\n\tisName: function(){......},\n\tisNum: function(){......}\n});\n//实例方法\nUser.include({\n\tadd: function(){......},\n\tdelete: function(){......}\n});</code></pre>\n\n<p>4、基于原型的继承</p>\n\n<pre><code>var User = function(){};\nUser.prototype.show = function(){\n\tconsole.log(&#39;----show----&#39;);\n};\n\nvar Student = function(){};\n//Student继承了User\nStudent.prototype = new User();\nStudent.prototype.study = function(){\n\tconsole.log(&#39;-----study-----&#39;);\n};\n\nvar stu = new Student();\nstu.show();\nstu.study();</code></pre>\n\n<p>5、给Class增加继承</p>\n\n<pre><code>var Class = function(parent){\n\tvar kalss = function(){\n\t\tthis.init.apply(this, arguments);\n\t};\n\nif(parent){\n\tvar subclass = function(){};\n\tsubclass.prototype = parent.prototype;\n\tklass.prototype = new subclass();\n}\n\nklass.prototype.init = function(){};\nklass.fn = klass.prototype;\nklass.fn.parent = klass;\n//这里可以参考github.com/maccman/super.js\nklass._super = klass.__proto__;\n\n//增加类属性\n\tKlass.extend = function(obj){\n\t\tvar extended = obj.extended;\n\t\tfor(var i in obj){\n\t\t\tklass[i] = obj[i];\n\t\t}\n\t\tif(extended)extended(klass);\n\t};\n\t//增加实例属性\n\tklass.include = function(obj){\n\t\tvar included = obj.included;\n\t\tfor(var i in obj){\n\t\t\tklass.fn[i] = obj[i];\n\t\t}\n\t\tif(included) included(klass);\n\t};\n\n\treturn klass;\n};</code></pre>","comments":[{"username":"测试2","comment":"测试2","time":"2015-05-04 10:35:02"},{"username":" 测试1","comment":"测试1","time":"2015-05-04 10:34:42"}]}